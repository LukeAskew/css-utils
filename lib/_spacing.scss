// values derived from http://modularscale.com/scale/?px1=16&px2=&ra1=1.618&ra2=0

$util-properties: margin padding;
$util-directions: top right bottom left;

// configurable variables
$util-ratio: 1.618 !default;
$util-base: 1em !default;

$util-spacing: (
	xxs: -4,
	xs: -3,
	s: -1,
	base: 0,
	l: 1,
	xl: 3,
	xxl: 4
) !default;

// modular scale, borrowed from Bourbon
@function util-modular($value, $increment) {
	$v1: nth($value, 1);
	$v2: nth($value, length($value));
	$value: $v1;
	$scale: $util-ratio;

	// scale $v2 to just above $v1
	@while $v2 > $v1 {
		$v2: ($v2 / $scale); // will be off-by-1
	}
	@while $v2 < $v1 {
		$v2: ($v2 * $scale); // will fix off-by-1
	}

	// check AFTER scaling $v2 to prevent double-counting corner-case
	$double-stranded: $v2 > $v1;

	@if $increment > 0 {
		@for $i from 1 through $increment {
			@if $double-stranded and ($v1 * $scale) > $v2 {
				$value: $v2;
				$v2: ($v2 * $scale);
			} @else {
				$v1: ($v1 * $scale);
				$value: $v1;
			}
		}
	}

	@if $increment < 0 {
		// adjust $v2 to just below $v1
		@if $double-stranded {
			$v2: ($v2 / $scale);
		}

		@for $i from $increment through -1 {
			@if $double-stranded and ($v1 / $scale) < $v2 {
				$value: $v2;
				$v2: ($v2 / $scale);
			} @else {
				$v1: ($v1 / $scale);
				$value: $v1;
			}
		}
	}

	@return $value;
}


// util builder
@each $direction in $util-directions {
	@each $property in $util-properties {

		.#{unquote(str_slice($property, 1, 1))}#{str_slice($direction, 1, 1)}-0 {
			#{$property}-#{$direction}: 0 !important;
		}

		@each $step, $value in $util-spacing {

			$className: #{unquote(str_slice($property, 1, 1))}#{str_slice($direction, 1, 1)}#{if($step == "base", "", "-" + $step)};

			.#{$className} {
				#{$property}-#{$direction}: util-modular($util-base, $value) !important;
			}

		}
	}
}

.ml-a {
	margin-left: auto !important;
}

.mr-a {
	margin-right: auto !important;
}
