// A little less-than-optimal in order to work with LibSass
// Values derived from http://modularscale.com/scale/?px1=16&px2=&ra1=1.618&ra2=0

// lists for iteration
$properties: margin padding;
$props: m p;
$directions: top right bottom left;
$dirs: t r b l;

// configurable variables
$scale: 1.618 !default;
$steps: -4, -3, -1, 0, 1, 3, 4 !default;


// modular scale, borrowed from Bourbon
@function modular($value, $increment) {
	$v1: nth($value, 1);
	$v2: nth($value, length($value));
	$value: $v1;

	// scale $v2 to just above $v1
	@while $v2 > $v1 {
		$v2: ($v2 / $scale); // will be off-by-1
	}
	@while $v2 < $v1 {
		$v2: ($v2 * $scale); // will fix off-by-1
	}

	// check AFTER scaling $v2 to prevent double-counting corner-case
	$double-stranded: $v2 > $v1;

	@if $increment > 0 {
		@for $i from 1 through $increment {
			@if $double-stranded and ($v1 * $scale) > $v2 {
				$value: $v2;
				$v2: ($v2 * $scale);
			} @else {
				$v1: ($v1 * $scale);
				$value: $v1;
			}
		}
	}

	@if $increment < 0 {
		// adjust $v2 to just below $v1
		@if $double-stranded {
			$v2: ($v2 / $scale);
		}

		@for $i from $increment through -1 {
			@if $double-stranded and ($v1 / $scale) < $v2 {
				$value: $v2;
				$v2: ($v2 / $scale);
			} @else {
				$v1: ($v1 / $scale);
				$value: $v1;
			}
		}
	}

	@return $value;
}


// util builder
@for $direction from 1 to length($directions) + 1 {
	@for $property from 1 to length($properties) + 1 {

		$p: nth($props, $property);
		$d: nth($dirs, $direction);
		$selector: $p + $d;

		$property-property: nth($properties, $property);
		$property-direction: nth($directions, $direction);
		$property: $property-property + "-" + $property-direction;


		.#{$selector}-0 {
			#{$property}: 0 !important;
		}
		.#{$selector}-xxs {
			#{$property}: modular(1em, nth($steps, 1)) !important;
		}
		.#{$selector}-xs {
			#{$property}: modular(1em, nth($steps, 2)) !important;
		}
		.#{$selector}-s {
			#{$property}: modular(1em, nth($steps, 3)) !important;
		}
		.#{$selector} {
			#{$property}: modular(1em, nth($steps, 4)) !important;
		}
		.#{$selector}-l {
			#{$property}: modular(1em, nth($steps, 5)) !important;
		}
		.#{$selector}-xl {
			#{$property}: modular(1em, nth($steps, 6)) !important;
		}
		.#{$selector}-xxl {
			#{$property}: modular(1em, nth($steps, 7)) !important;
		}

	}
}

.ml-a {
	margin-left: auto;
}

.mr-a {
	margin-right: auto;
}
